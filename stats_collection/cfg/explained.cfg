# Example YAML configuration file for "collect.perl"

# -----------------------------------------------------------------------------
# Known Variable Selection Strategies (VSS)
# -----------------------------------------
#
# input_order       : Choose in order from the array of vars indicated in the
#                     annotation.
# first_fail        : Choose the variable with the smallest domain size.
# anti_first_fail   : Choose the variable with the largest domain size.
# smallest          : Choose the variable with the smallest value in its domain.
# largest           : Choose the variable with the largest value in its domain.
# occurrence        : Choose the variable with the largest number of attached.
#                     constraints.
# most_constrained  : Choose the variable with the smallest domain, breaking
#                     ties using the number of constraints.
# max_regret        : Choose the variable with the largest difference between
#                     the two smallest values in its domain.
# dom_w_deg         : Choose the variable with the smallest value of domain
#                     size divided by weighted degree, which is the number of
#                     times it has been in a constraint that caused failure
#                     earlier in the search.
#
# Gecode also allows these:
#
# activity_max      : Select variable with largest activity count.
# activity_min      : Select variable with smallest activity count.
# activity_size_max : Select variable with largest activity count divided by
#                     domain size.
# activity_size_min : Select variable with smallest activity count divided by
#                     domain size
# afc_max           : Select variable with largest accumulated failure count.
# afc_min           : Select variable with smallest accumulated failure count.
# afc_size_max      : Select variable with largest accumulated failure count
#                     divided by domain size.
# afc_size_min      : Select variable with smallest accumulated failure count
#                     divided by domain size.
# random            : Select random variable.
#
# Known Domain Splitting Strategies (DSS)
# ---------------------------------------
#
# indomain_min           : Assign the smallest value in the variable's domain.
# indomain_max           : Assign the largest value in the variable's domain.
# indomain_middle        : Assign the value in the variable’s domain closest to
#                          the mean of its current bounds.
# indomain_median        : Assign the middle value in the variable’s domain.
# indomain               : Nondeterministically assign values to the variable
#                          in ascending order.
# indomain_random        : Assign a random value from the variable’s domain.
# indomain_split         : Bisect the variable’s domain, excluding the upper
#                          half first.
# indomain_reverse_split : Bisect the variable’s domain, excluding the lower
#                          half first.
# indomain_interval      : If the variable’s domain consists of several
#                          contiguous intervals, reduce the domain to the
#                          first interval. Otherwise just split the
#                          variable’s domain.
#
# See these for information about search annotations:
#
# "Search":            https://www.minizinc.org/doc-2.5.5/en/mzn_search.html
# "Search annotations" https://www.minizinc.org/doc-2.5.5/en/fzn-spec.html#search-annotations
# "CP Profiler"        https://www.minizinc.org/doc-2.5.5/en/cpprofiler.html
# "Additional Gecode search annotations"
#                      https://www.minizinc.org/doc-2.5.5/en/lib-gecode.html#additional-gecode-search-annotations
#
# Known Restart Strategies
# ------------------------
# The "restart" annotation is simpler than the "search" annotation and
# does not use keywords for configuration, just integers and floats. The
# following are known:
#
# restart_none                              : Do not restart.
# restart_constant(int: scale)              : Restart after constant number of nodes "scale".
# restart_geometric(float: base,int: scale) : Restart with geometric sequence with parameters base and scale.
# restart_linear(int: scale)                : Restart with linear sequence scaled by scale.
# restart_luby(int: scale)                  : Restart with Luby sequence scaled by scale
#
# A restart is triggered when (presumably) an limiting number of
# additional search tree nodes have been visited, with the limiting sequence
# either a constant, or an appropriately scaled exponential (geometric), linear
# "Luby" sequence.
#
# The Luby sequence (named after A. Luby and described in "Optimal Speedup of
# Las Vegas Algorithms", 1993-02) is as follows:
#
# 1 1 2 1 1 2 4 1 1 2 1 1 2 4 8 1 ..
#
# See this for information about restart annotations:
#
# https://www.minizinc.org/doc-2.5.5/en/lib-stdlib.html#restart-annotations
# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
# Define aliases/abbreviations for the search annotation keywords to keep
# subsequent text small.
#
# There is a set of keywords for "variable selection strategy" (VSS, what
# variable to select next during search), called "varchoiceannotation" or
# "value choice strategy" in the MiniZinc manual, as well as a set for "domain
# splitting strategy" (DSS, how to constrain the domain on the left branch
# of the binary decision tree), called "assignmentannotation" in the MiniZinc
# manual.
#
# The "aliases" block is completely optional, you can alternatively use the
# full names of the strategies.
#
# The placeholders found in annotation templates further below must map to
# a valid alias. By default the full names for VSS and DSS are aliases that
# need not be listed below, map to themselves and are thus valid.
#
# If an alias is defined that does not map to a known VSS or DSS full name, it
# is accepted (so you can define new full names by just mapping them to
# themselves) but a warning is emitted.
# -----------------------------------------------------------------------------

aliases:
   variable_selection_strategy:
      io       : input_order
      ff       : first_fail
      sm       : smallest
      lg       : largest
   domain_splitting_strategy:
      min      : indomain_min
      max      : indomain_max
      med      : indomain_median
      rand     : indomain_random
      split    : indomain_split
      revsplit : indomain_reverse_split

# -----------------------------------------------------------------------------
# The model file(s).
# There is generally only one, although one also may give several. In that
# case, they are all processed with the same set of datafiles and the
# configurations associated to the datafiles. May be useful to compare several
# ways of coding the exact same problem.
# -----------------------------------------------------------------------------

modelfiles:
   - prepare_modded.mzn

# -----------------------------------------------------------------------------
# Toplevel "default" block.
#
# These defaults can be overridden in a configuration block although doing so
# may not necessarily make sense.
#
# The "objval_name" (name of the "objective value" variable) is evidently
# specific to a given modelfile.
#
# So are the names and of the "search" and the "restart" annotations.
#
# The templates for the "search" and "restart" annotations may or may not
# contain placeholders introduced with a dollar sign.
#
# If no "defaults" are given, the following apply:
#
# rounds      : 1
# limit_s     : 0  (i.e. "no time limit")
# objval_name : obj
#
# Below we have:
# --------------
#
# 1) Define a search annotation called "my_search_annotation" which performs
#    integer search on variable "s" with VSS and DSS keywords that will be defined
#    later. The template may be overriden later. too.
#
# 2) Define a restart annotation called "my_restart_annotation" which performs
#    no restarts. The template may be overridden later for more interesting
#    behaviour.
#
# Any of those entries can be left out of it is not needed.
# -----------------------------------------------------------------------------

defaults:
   rounds       : 1           # Multiple rounds make sense in case of random selections
   limit_s      : 0           # 0 means "no time limit"
   objval_name  : makespan    # Generally, the default "obj" would be correct
   search:
      name      : my_search_annotation
      template  : "int_search(s, $vss, $dss)"
   restart:
      name      : my_restart_annotation
      template  : restart_none

# -----------------------------------------------------------------------------
# A "configuration" block. To identify it, its root name must begin with
# "config_". Multiple configuration blocks can be defined, and then associated
# to datafiles in the "datafiles" block.
#
# Inside a configuration block, a "defaults" block may fully or partially
# override or complement the values of the toplevel "defaults" block.
#
# The configuration block contains at least one application block. The
# application block must give the values of all the placeholders found
# "search" or in "restart" annotation templates. It may also give overriding
# values for "rounds" and "limit_s". Note that in order to perform alias
# replacement the placeholders that appear where Variable Selection Strategy
# keywords are expected must contain the string "vss", and the placeholders
# that appear where Domain Splitting Strategy keywords are expected must
# contain "dss". Muliple "dss" placeholders can then be named "$dss1", "$dss2"
# or something analogue.
#
# For any datafile that references a configuration block (by name), MiniZinc
# processes are started for all the application blocks found in that
# configuration block, with placeholder replacements applied.
# -----------------------------------------------------------------------------

config_searching_on_s:
   defaults:
      limit_s     : 30
   application_1:
      vss         : input_order
      dss         : indomain_min
   application_2:
      vss         : input_order
      dss         : indomain_split

config_searching_on_s_randomly:
   defaults:
      limit_s     : 30
      rounds      : 10
      search:
         name     : my_search_annotation
         template : "int_search(s, input_order, indomain_random)"
      restart:
         name     : my_restart_annotation
         template : restart_luby($scale)
   application_1:
      scale       : 100
   application_2:
      scale       : 200

config_searching_on_b:
   defaults:
      limit_s     : 30
      search:
         name     : my_search_annotation
         template : "int_search(b, $vss, $dss)"
   application_1:
      vss      : io
      dss      : rand

config_searching_on_both:
   defaults:
      search:
         name     : my_search_annotation
         template : "seq_search([int_search(s,$vss_s,$dss_s),int_search(b,$vss_b,$dss_b)])"

   application_1:
      vss_s    : input_order
      dss_s    : indomain_min
      vss_b    : dom_w_deg
      dss_b    : indomain_min
      rounds   : 10
      limit_s  : 100

# -----------------------------------------------------------------------------
# Define how to process datafiles. This is a map where the key is the
# name of the datafile (or possibly a path to it) and the value is either:
#
# - A single name of a configuration
# - An array of names of configurations
#
# The (modelfile,datafile) pair will be processed according to
# all the applications listed in all the associated configurations.
#
# Currently not supported: The case whereby you need no datafile. You will
# have to set up a dummy one.
# -----------------------------------------------------------------------------

datafiles:
   prepare1.dzn:  config_searching_on_s
   prepare2.dzn:  config_searching_on_s
   prepare3.dzn:  config_searching_on_s
   prepare4.dzn:  config_searching_on_s
   prepare5.dzn:  config_searching_on_s
   prepare6.dzn:  config_searching_on_s
   prepare7.dzn:  config_searching_on_s
   prepare8.dzn:  config_searching_on_s
   prepare9.dzn:  config_searching_on_s
   prepare10.dzn: config_searching_on_s
   prepare11.dzn: config_searching_on_s
   prepare12.dzn: config_searching_on_s
   prepare13.dzn:
      - config_searching_on_s
      - config_searching_on_both
      - config_searching_on_s_randomly
   prepare14.dzn:
      - config_searching_on_s
      - config_searching_on_b
      - config_searching_on_both
      - config_searching_on_s_randomly






