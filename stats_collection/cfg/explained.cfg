# ---
# Define aliases/abbreviations for the search annotation keywords to
# keep subsequent text small.
# There is a set of keywords for "variable selection strategy"
# (what variable to select next during search) and a set for
# "domain splitting strategy": how to constrain the domain on the left
# branch of the binary decision tree, with its complement on right branch
# of the tree.
#
# These are completely optional, you can use the full names. The
# following are known. In strategies, the placeholder values must
# map to a valid alias; by default the full names map to themselves
# and are thuis valid; if an alias is defined that does not map
# to a known full name, it is accepted (so you can define new
# full names by just mapping them to themselves) but a warning is
# emitted.
#
# Known Variable Selection Strategies
# -----------------------------------
#
# input_order       : Choose in order from the array of vars indicated in the
#                     annotation.
# first_fail        : Choose the variable with the smallest domain size.
# anti_first_fail   : Choose the variable with the largest domain size.
# smallest          : Choose the variable with the smallest value in its domain.
# largest           : Choose the variable with the largest value in its domain.
# occurrence        : Choose the variable with the largest number of attached.
#                     constraints.
# most_constrained  : Choose the variable with the smallest domain, breaking
#                     ties using the number of constraints.
# max_regret        : Choose the variable with the largest difference between
#                     the two smallest values in its domain.
# dom_w_deg         : Choose the variable with the smallest value of domain
#                     size divided by weighted degree, which is the number of
#                     times it has been in a constraint that caused failure
#                     earlier in the search.
#
# Known Domain Splitting Strategies
# ---------------------------------
#
# indomain_min           : Assign the smallest value in the variable's domain.
# indomain_max           : Assign the largest value in the variable's domain.
# indomain_middle        : Assign the value in the variable’s domain closest to
#                          the mean of its current bounds.
# indomain_median        : Assign the middle value in the variable’s domain.
# indomain               : Nondeterministically assign values to the variable
#                          in ascending order.
# indomain_random        : Assign a random value from the variable’s domain.
# indomain_split         : Bisect the variable’s domain, excluding the upper
#                          half first.
# indomain_reverse_split : Bisect the variable’s domain, excluding the lower
#                          half first.
# indomain_interval      : If the variable’s domain consists of several
#                          contiguous intervals, reduce the domain to the
#                          first interval. Otherwise just split the
#                          variable’s domain.
# See
#
# - https://www.minizinc.org/doc-2.5.5/en/mzn_search.html
# - https://www.minizinc.org/doc-2.5.5/en/fzn-spec.html?highlight=dom_w_deg#search-annotations
# - https://www.minizinc.org/doc-2.5.5/en/cpprofiler.html
#
# for information about search annotations.
# ---

aliases:
   variable_selection_strategy:
      io       : input_order
      ff       : first_fail
      sm       : smallest
      lg       : largest
   domain_splitting_strategy:
      min      : indomain_min
      max      : indomain_max
      med      : indomain_median
      rand     : indomain_random
      split    : indomain_split
      revsplit : indomain_reverse_split

# ---
# The model files (maybe multiple ones)
# ---

modelfiles:
   - prepare_modded.mzn

# ---
# Define how to process datafiles. This is a map where the key is
# the (unqualified) name of the data file and the value the name of
# a configuration, which defines how to process it. In turn, a
# configuration may define several strategies to be tested in turn.
# ---

datafiles:
   prepare1.dzn:
      - tuning_on_s
      - tuning_on_b
   prepare2.dzn:  tuning_on_s
   prepare3.dzn:  tuning_on_s
   prepare4.dzn:  tuning_on_s
   prepare5.dzn:  tuning_on_s
   prepare6.dzn:  tuning_on_s
   prepare7.dzn:  tuning_on_s
   prepare8.dzn:  tuning_on_s
   prepare9.dzn:  tuning_on_s
   prepare10.dzn: tuning_on_s
   prepare11.dzn: tuning_on_s
   prepare12.dzn: tuning_on_s
   prepare13.dzn: tuning_on_s
   prepare14.dzn: tuning_on_s

# ---
# Configurations define how a given model + datafile combination
# should be run by listing a number of strategies to apply.
#
# Under any given configuration alias (e.g. "config_1"), we find:
#
# - The configuration defaults (optional), of which there are:
#    - rounds: how often to run a model with a given strategy, which
#      is useful to collect statistics in the case "random selection"
#      strategies are applied. If missing, the default is 1.
#      A rounds value of 0 means "don't run".
#    - limit_s: the time limit for running a model with a given
#      strategy, in seconds. If missing, the default is 0, which
#      means unlimited time.
#    - obj_name: the name of the objective value variable to
#      look for in the output
#
# - The annotation description (optional but you probably have an
#   annotation to set up). The annotation template contains
#   placehodlers set by each strategy.
#
# - A number of strategies to try, which define the values for
#   the annotation placeholders and possibly overriding values
#   for the defaults. A bit awkwardly, we demand that the
#   placeholder name contain either of the strings "vss" or "dss"
#   to be able to find out through which alias map the value for
#   placeholder can be de-aliased.
# ---

configurations:
   tuning_on_s:
      defaults:
         rounds   : 1
         limit_s  : 30
         obj_name : makespan
      annotation:
         name     : my_annotation
         template : "int_search(s, $vss, $dss)" # variable s
      strategy_1:
         vss      : input_order
         dss      : min
      strategy_2:
         vss      : input_order
         dss      : split
      strategy_4:
         vss      : input_order
         dss      : rand
         rounds   : 4
   tuning_on_b:
      defaults:
         rounds   : 1
         limit_s  : 30
         obj_name : makespan
      annotation:
         name     : my_annotation
         template : "int_search(b, $vss, $dss)" # variable b
      strategy_1:
         vss      : input_order
         dss      : rand

